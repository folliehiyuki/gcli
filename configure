#!/bin/sh

# set -o pipefail

PACKAGE_VERSION="2.4.0-devel"
PACKAGE_DATE="UNRELEASED"
PACKAGE_STRING="gcli $PACKAGE_VERSION"
PACKAGE_BUGREPORT="https://lists.sr.ht/~herrhotzenplotz/gcli-discuss"
PACKAGE_URL="https://sr.ht/~herrhotzenplotz/gcli"
echo "Configuring gcli $PACKAGE_VERSION" >&2

find_program() {
	varname=$1
	shift

	printf "Checking for $varname ..." >&2
	for x in $*; do
		if [ -x $(command -v $x) ]; then
			printf " $x\n" >&2
			echo $x
			return
		fi
	done
	printf " not found\n" >&2
	exit 1

}

REALPATH=${REALPATH:-$(find_program realpath realpath grealpath)}
srcdir=$($REALPATH $(dirname $0))

toupper() {
	tr '[[:upper:]]' '[[:lower:]]'
}

die() {
	printf "%s\n" "${*}"
	exit 1
}

compiler_type() {
	if ${1} -v 2>&1 | grep clang > /dev/null; then
		echo "clang"
	elif ${1} -v 2>&1 | grep gcc > /dev/null; then
		echo "gcc"
	else
		# TODO: implement studio and xlc
		echo "unknown"
	fi
}

normalise_compiler_target() {
	sed -e 's|x86_64|amd64|g' -e 's| ||g'
}

compiler_target() {
	ccom=$1
	cc=$2

	case $ccom in
		gcc|clang)
			$cc -v 2>&1 \
				| grep '^Target' \
				| cut -d: -f2
			;;
		*)
			echo "unknown-unknown-unknown"
			;;
	esac | normalise_compiler_target
}

# args= pkgconfig-name variable-name is-mandatory
find_package() {
	printf "Checking for $1 ..." >&2
	if ! $PKG_CONFIG --exists $1; then
		if [ $3 -eq 0 ]; then
			printf " not found\n"
			export ${2}_FOUND=0
			return
		else
			die "not found"
		fi
	fi
	export ${2}_CFLAGS="$($PKG_CONFIG --cflags $1)"
	export ${2}_LIBS="$($PKG_CONFIG --libs $1)"
	export ${2}_FOUND=1
	printf " found\n" >&2
}

# Install options
#
PREFIX=/usr/local

# Parse flags
if [ $# -gt 0 ]; then
	case "$1" in
		--prefix=*)
			PREFIX=${1##--prefix=}
			;;
		--prefix)
			PREFIX=${2}
			;;
		*)
			die "error: unknown flag: $1"
			;;
	esac
fi


# Host Compiler
printf "Checking host compiler ..."
CC=${CC:-cc}
printf " $CC\n"

# Detect the compiler type and enable dependency tracking
printf "Checking host compiler type ..."
CCOM=$(compiler_type "${CC}")
printf " $CCOM\n"

printf "Checking host compiler target ..."
HOST=$(compiler_target $CCOM $CC)
printf " $HOST\n"

# Build compiler
printf "Checking for cross-compilation setup ..."
is_cross=0
CC_FOR_BUILD=${CC_FOR_BUILD:-${CC}}
if ! [ "${CC_FOR_BUILD}" = "${CC}" ]; then
	is_cross=1
	printf " yes\n"
else
	printf " no\n"
fi

if [ $is_cross -eq 1 ]; then
	printf "Checking build compiler type..."
	CCOM_FOR_BUILD=$(compiler_type "${CC_FOR_BUILD}")
	printf " ${CCOM_FOR_BUILD}\n"

	printf "Checking build compiler target ..."
	BUILD=$(compiler_target $CCOM_FOR_BUILD $CC_FOR_BUILD)
	printf " $BUILD\n"
else
	CCOM_FOR_BUILD="${CCOM}"
	BUILD="${HOST}"
fi

PKG_CONFIG=${PKG_CONFIG:-$(find_program pkg-config pkg-config pkgconf)}
find_package libcurl LIBCURL 1
find_package atf-c LIBATFC 0

AR=${AR:-ar}
RANLIB=${RANLIB:-ranlib}
RM=${RM:-rm}
KYUA=${KYUA:-$(find_program kyua kyua)}
INSTALL=${INSTALL:-$(find_program install install ginstall)}

sed \
	-e "s|@SRCDIR@|$srcdir|g" \
	-e "s|@LIBCURL_CFLAGS@|$LIBCURL_CFLAGS|g" \
	-e "s|@LIBCURL_LIBS@|$LIBCURL_LIBS|g" \
	-e "s|@LIBATFC_CFLAGS@|$LIBATFC_CFLAGS|g" \
	-e "s|@LIBATFC_LIBS@|$LIBATFC_LIBS|g" \
	-e "s|@CONFIGURE_CMD_ARGS@|$@|g" \
	-e "s|@CC@|$CC|g" \
	-e "s|@CCOM@|$CCOM|g" \
	-e "s|@ENV_CFLAGS@|$CFLAGS|g" \
	-e "s|@ENV_CPPFLAGS@|$CPPFLAGS|g" \
	-e "s|@CC_FOR_BUILD@|$CC_FOR_BUILD|g" \
	-e "s|@CCOM_FOR_BUILD@|$CCOM_FOR_BUILD|g" \
	-e "s|@ENV_CFLAGS_FOR_BUILD@|$CFLAGS_FOR_BUILD|g" \
	-e "s|@ENV_CPPFLAGS_FOR_BUILD@|$CPPFLAGS_FOR_BUILD|g" \
	-e "s|@ENV_PKG_CONFIG@|$PKG_CONFIG|g" \
	-e "s|@ENV_PKG_CONFIG_PATH@|$PKG_CONFIG_PATH|g" \
	-e "s|@AR@|$AR|g" \
	-e "s|@RANLIB@|$RANLIB|g" \
	-e "s|@RM@|$RM|g" \
	-e "s|@KYUA@|$KYUA|g" \
	-e "s|@INSTALL@|$INSTALL|g" \
	-e "s|@PREFIX@|$PREFIX|g" \
	-e "s|@PACKAGE_STRING@|$PACKAGE_STRING|g" \
	-e "s|@PACKAGE_DATE@|$PACKAGE_DATE|g" \
	-e "s|@PACKAGE_BUGREPORT@|$PACKAGE_BUGREPORT|g" \
	-e "s|@PACKAGE_URL@|$PACKAGE_URL|g" \
	-e "s|@PACKAGE_VERSION@|$PACKAGE_VERSION|g" \
	< $srcdir/Makefile.in > Makefile

cat > config.h <<EOF
#define PACKAGE_STRING "$PACKAGE_STRING"
#define PACKAGE_URL "$PACKAGE_URL"
#define PACKAGE_VERSION "$PACKAGE_VERSION"
#define PACKAGE_BUGREPORT "$PACKAGE_BUGREPORT"
#define PACKAGE_DATE "$PACKAGE_DATE"
#define HOSTOS "$HOST"
EOF

echo "Configuration done. You may now run make."
